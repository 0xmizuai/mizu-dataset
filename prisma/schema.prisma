generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model users {
//   id         Int       @id @default(autoincrement())
//   user_key   String    @unique
//   type       UserType  @default(EMAIL)
//   name       String?
//   email      String?
//   avatar     String?
//   created_at DateTime  @default(now())
//   updated_at DateTime  @updatedAt
//   queries    queries[]
// }

model datasets {
  id            Int            @id @default(autoincrement())
  name          String
  language      String
  data_type     String
  total_objects Int            @default(0)
  total_bytes   BigInt         @default(0)
  created_at    DateTime       @default(now())
  crawled_at    DateTime       @db.Timestamptz(6)
  source        String         @db.VarChar(255)
  source_link   String
  data_records  data_records[]
  queries       queries[]

  @@index([name, language, data_type, created_at])
}

model data_records {
  id                     Int      @id @default(autoincrement())
  dataset_id             Int
  md5                    String
  num_of_records         Int      @default(0)
  decompressed_byte_size BigInt   @default(0)
  byte_size              BigInt   @default(0)
  source                 String
  created_at             DateTime @default(now())
  dataset                datasets @relation(fields: [dataset_id], references: [id])

  @@index([md5, dataset_id, created_at])
}

model queries {
  id                    Int      @id @default(autoincrement())
  dataset_id            Int
  query_text            String
  model                 String
  user_id               String
  last_record_published Int      @default(0)
  status                Int      @default(0)
  created_at            DateTime @default(now())
  points_spent          BigInt   @default(0)
  dataset               datasets @relation(fields: [dataset_id], references: [id])
  // user                  users    @relation(fields: [user_id], references: [user_key])

  @@index([user_id, dataset_id, status])
}

// enum UserType {
//   GOOGLE
//   EMAIL
//   GITHUB
// }
